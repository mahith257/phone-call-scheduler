import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  days: {
      
  },
  selectedDate: ''
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const daySlice = createSlice({
  name: 'day',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addDetails : (state,action) => {
      if(state.days[action.payload.day]){
        state.days[action.payload.day][action.payload.timeSlot] = action.payload.details
      }else{
        state.days[action.payload.day] = {}
        state.days[action.payload.day][action.payload.timeSlot] = action.payload.details
      }
      
    },
    changeSelectedDate: (state,action) => {
      state.selectedDate = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { addDetails, changeSelectedDate } = daySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectDay = (state) => state.day.days;
export const selectSelectedDay = (state) => state.day.selectedDate

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default daySlice.reducer;
